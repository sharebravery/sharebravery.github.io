import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,a as s,d as t,e as p,o as i,r as l}from"./app-BLVuhwt8.js";const u={},r={href:"https://github.com/stephane/libmodbus/releases",target:"_blank",rel:"noopener noreferrer"},d={href:"https://sharebravery.github.io/linux/RS485.html",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const a=l("ExternalLinkIcon");return i(),c("div",null,[n[2]||(n[2]=e('<h1 id="利用-rs485-实现-modbus-通信的完整步骤" tabindex="-1"><a class="header-anchor" href="#利用-rs485-实现-modbus-通信的完整步骤"><span>利用 RS485 实现 Modbus 通信的完整步骤</span></a></h1><h1 id="_1-关于-modbus" tabindex="-1"><a class="header-anchor" href="#_1-关于-modbus"><span>1. 关于 Modbus</span></a></h1><blockquote><p>Modbus 是一种通用的工业通信协议，广泛应用于自动化领域中设备之间的通信。它最初由 Modicon（现在的施耐德电气）于 1979 年开发，是一个开放标准的协议。</p></blockquote><p>在 OSI 模型中，Modbus 通常被归类为应用层协议，可以说<strong>RS485</strong> 是 OSI 模型中的<strong>物理层</strong>实现，负责电气和机械特性，<strong>Modbus</strong> 则通常处于 OSI 模型的<strong>应用层</strong>，负责定义数据传输的结构、规则和协议。</p><p>Modbus 协议支持多种通信介质和网络，包括 RS232、RS485、TCP/IP，通常用于建立主从结构的通信，主站发送请求（查询）给从站，从站响应请求并返回数据。</p><blockquote><p><strong>协议类型</strong>：</p><ul><li><strong>Modbus RTU</strong>：基于串行通信，通常使用 RS-232 或 RS-485 接口。</li><li><strong>Modbus ASCII</strong>：基于 ASCII 编码的串行通信协议。</li><li><strong>Modbus TCP</strong>：基于 TCP/IP 网络通信的协议，以太网为基础。</li></ul></blockquote><p><strong>一主多从</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/sharebravery/album@master/6ad6f828d03e90b8b9e19558e2818db8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="_2-交叉编译-libmodbus" tabindex="-1"><a class="header-anchor" href="#_2-交叉编译-libmodbus"><span>2. 交叉编译 libmodbus</span></a></h1><p>由于我们需要使用 libmodbus 这个库，而我将在 ARM 开发板上运行，所以需要下载 libmodbus 的库进行交叉编译</p><h2 id="_2-1-下载-libmodbus" tabindex="-1"><a class="header-anchor" href="#_2-1-下载-libmodbus"><span>2.1 下载 libmodbus</span></a></h2>',11)),s("p",null,[s("a",r,[n[0]||(n[0]=t("github libmodbus")),p(a)])]),n[3]||(n[3]=e(`<p>我这里下载了最新的 3.1.10</p><p>解压</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> libmodbus-3.1.10.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-2-配置编译环境" tabindex="-1"><a class="header-anchor" href="#_2-2-配置编译环境"><span>2.2 配置编译环境</span></a></h2><p>解压后进入<code>libmodbus-3.1.10</code>目录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--host</span><span class="token operator">=</span>arm-linux-gnueabihf <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/arm-libmodbus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你没有安装 ARM 的交叉编译工具，则</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc-arm-linux-gnueabihf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-3-编译并安装库" tabindex="-1"><a class="header-anchor" href="#_2-3-编译并安装库"><span>2.3 编译并安装库</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/sharebravery/album@master/20240627093518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="_3-复制编译好的文件到-arm-板" tabindex="-1"><a class="header-anchor" href="#_3-复制编译好的文件到-arm-板"><span>3. 复制编译好的文件到 ARM 板</span></a></h1><p>在板子上运行引用到 libmobus 的库还需要将编译好的库文件和头文件复制到 ARM 板上</p><h2 id="_3-1-打包库文件" tabindex="-1"><a class="header-anchor" href="#_3-1-打包库文件"><span>3.1 打包库文件</span></a></h2><p>进入<code>/usr/local/arm-libmodbus</code>目录打包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/arm-libmodbus
<span class="token function">sudo</span> <span class="token function">tar</span> czvf arm-libmodbus.tar.gz lib include
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-安装库" tabindex="-1"><a class="header-anchor" href="#_3-2-安装库"><span>3.2 安装库</span></a></h2><p>将压缩包丢到板子上后进行解压</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> xzvf arm-libmodbus.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> lib/* /usr/lib/
<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> include/* /usr/include/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时库安装完毕</p><h1 id="_4-c-程序测试-modbus-rtu" tabindex="-1"><a class="header-anchor" href="#_4-c-程序测试-modbus-rtu"><span>4. C 程序测试 Modbus RTU</span></a></h1><blockquote><p>Modbus 协议定义了数据的帧格式，包括地址、功能码、数据区域和校验等部分</p><p>如果直接使用 RS485 通信，没有固定的数据格式和通信流程，需要自行处理数据帧的校验、错误检测和恢复等问题</p></blockquote><p>前面准备工作已经做完了，接下来写个 C 程序来测试使用 Modbus RTU，使用 RS485 接口</p><p>我下面的代码特地将波特率抽了出来放在一个头文件中，你也可以直接写死或者进行外部传参</p><h2 id="_4-1-master-c" tabindex="-1"><a class="header-anchor" href="#_4-1-master-c"><span>4.1 master.c</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;modbus.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;config.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">modbus_t</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> tab_reg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建新的 RTU，波特率设置为 115200</span>
    ctx <span class="token operator">=</span> <span class="token function">modbus_new_rtu</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/ttyACM0&quot;</span><span class="token punctuation">,</span> BAUD_RATE<span class="token punctuation">,</span> <span class="token char">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置 Modbus 从机 ID 为 1</span>
    <span class="token function">modbus_set_slave</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 连接到 Modbus 从机</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">modbus_connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;连接失败: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">modbus_strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 从地址 0 开始读取 10 个寄存器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">modbus_read_registers</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> tab_reg<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;读取失败: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">modbus_strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;寄存器 %d: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> tab_reg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭连接并释放 Modbus</span>
    <span class="token function">modbus_close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-slave-c" tabindex="-1"><a class="header-anchor" href="#_4-2-slave-c"><span>4.2 slave.c</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;modbus.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;config.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">modbus_t</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span>
    <span class="token class-name">modbus_mapping_t</span> <span class="token operator">*</span>mb_mapping<span class="token punctuation">;</span>

    <span class="token comment">// 创建新的 RTU，波特率设置为 115200</span>
    ctx <span class="token operator">=</span> <span class="token function">modbus_new_rtu</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/ttyACM0&quot;</span><span class="token punctuation">,</span> BAUD_RATE<span class="token punctuation">,</span> <span class="token char">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置 Modbus 从机 ID 为 1</span>
    <span class="token function">modbus_set_slave</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 连接到 Modbus 主机</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">modbus_connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;连接失败: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">modbus_strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分配 Modbus 映射（100 个保持寄存器）</span>
    mb_mapping <span class="token operator">=</span> <span class="token function">modbus_mapping_new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb_mapping <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;映射失败: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">modbus_strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> query<span class="token punctuation">[</span>MODBUS_RTU_MAX_ADU_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 从 Modbus 主机接收查询</span>
        <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">modbus_receive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 回复查询</span>
            <span class="token function">modbus_reply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> query<span class="token punctuation">,</span> rc<span class="token punctuation">,</span> mb_mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;接收失败: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">modbus_strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 释放 Modbus</span>
    <span class="token function">modbus_mapping_free</span><span class="token punctuation">(</span>mb_mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">modbus_close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">modbus_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-config-h" tabindex="-1"><a class="header-anchor" href="#_4-3-config-h"><span>4.3 config.h</span></a></h2><p>放置配置的头文件，注意头文件保护符</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIG_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BAUD_RATE</span> <span class="token expression"><span class="token number">115200</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// CONFIG_H</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-makefile" tabindex="-1"><a class="header-anchor" href="#_4-4-makefile"><span>4.4 Makefile</span></a></h2><p>写个简单的 Makefile 方便编译</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CC <span class="token operator">=</span> arm-linux-gnueabihf-gcc
CFLAGS <span class="token operator">=</span> -Wall -I/usr/local/arm-libmodbus/<span class="token keyword">include</span>/modbus
LDFLAGS <span class="token operator">=</span> -L/usr/local/arm-libmodbus/lib -lmodbus

<span class="token target symbol">all</span><span class="token punctuation">:</span> master slave

<span class="token target symbol">master</span><span class="token punctuation">:</span> master.o
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o master master.o <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span>

<span class="token target symbol">slave</span><span class="token punctuation">:</span> slave.o
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o slave slave.o <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span>

<span class="token target symbol">master.o</span><span class="token punctuation">:</span> master.c config.h
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -c master.c -o master.o

<span class="token target symbol">slave.o</span><span class="token punctuation">:</span> slave.c config.h
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -c slave.c -o slave.o

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f master slave *.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-5-运行结果" tabindex="-1"><a class="header-anchor" href="#_4-5-运行结果"><span>4.5 运行结果</span></a></h2><p>使用<code>chmod +x [file]</code>给文件权限，运行成功你可以看到以下信息，代表基于 RS485 的 Modbus 通讯成功</p><figure><img src="https://cdn.jsdelivr.net/gh/sharebravery/album@master/20240627112118.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果只是简单测试通讯，那么到这里就可以了。</p><hr><p>相关文章：</p>`,42)),s("p",null,[s("a",d,[n[1]||(n[1]=t("RS-485 串口通信：简易指南与代码示例")),p(a)])]),n[4]||(n[4]=s("p",null,[s("em",null,"END")],-1))])}const h=o(u,[["render",k],["__file","modbusOverRS485.html.vue"]]),g=JSON.parse('{"path":"/linux/modbusOverRS485.html","title":"利用 RS485 实现 Modbus 通信的完整步骤","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"2.1 下载 libmodbus","slug":"_2-1-下载-libmodbus","link":"#_2-1-下载-libmodbus","children":[]},{"level":2,"title":"2.2 配置编译环境","slug":"_2-2-配置编译环境","link":"#_2-2-配置编译环境","children":[]},{"level":2,"title":"2.3 编译并安装库","slug":"_2-3-编译并安装库","link":"#_2-3-编译并安装库","children":[]},{"level":2,"title":"3.1 打包库文件","slug":"_3-1-打包库文件","link":"#_3-1-打包库文件","children":[]},{"level":2,"title":"3.2 安装库","slug":"_3-2-安装库","link":"#_3-2-安装库","children":[]},{"level":2,"title":"4.1 master.c","slug":"_4-1-master-c","link":"#_4-1-master-c","children":[]},{"level":2,"title":"4.2 slave.c","slug":"_4-2-slave-c","link":"#_4-2-slave-c","children":[]},{"level":2,"title":"4.3 config.h","slug":"_4-3-config-h","link":"#_4-3-config-h","children":[]},{"level":2,"title":"4.4 Makefile","slug":"_4-4-makefile","link":"#_4-4-makefile","children":[]},{"level":2,"title":"4.5 运行结果","slug":"_4-5-运行结果","link":"#_4-5-运行结果","children":[]}],"git":{"createdTime":1719905251000,"updatedTime":1719905251000,"contributors":[{"name":"sharebravery","email":"sharebravery@gmail.com","commits":1}]},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"linux/modbusOverRS485.md","localizedDate":"2024年7月2日","excerpt":""}');export{h as comp,g as data};
