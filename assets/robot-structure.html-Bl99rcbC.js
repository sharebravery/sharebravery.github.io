import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as i,d as e,r as t,o as r}from"./app-DMVMUeoW.js";const p={};function d(h,s){const n=t("Mermaid");return r(),l("div",null,[s[0]||(s[0]=i(`<h1 id="分布式机器人多机协同巡检系统设计" tabindex="-1"><a class="header-anchor" href="#分布式机器人多机协同巡检系统设计"><span>分布式机器人多机协同巡检系统设计</span></a></h1><p>这篇文章是对之前做过的分布式机器人多机协同系统的一些设计和思考的整理归纳。写下来主要是为了复盘思路，理清架构，同时也能给后来者提供一些参考。</p><h2 id="一、基本概念" tabindex="-1"><a class="header-anchor" href="#一、基本概念"><span>一、基本概念</span></a></h2><p>我们要解决的问题是：<strong>如何让多个异构机器人设备协同完成巡检任务</strong>。这意味着系统需要统一调度无人机、地面机器人、固定相机和其他边缘计算节点等</p><p>从架构层面看，最合理的方式是 <strong>中心控制</strong>：</p><ul><li>云端负责全局调度与任务编排，下发统一的任务指令；</li><li>各设备只需按照分配的任务执行，并将运行状态上报云端</li></ul><p>为了让不同类型的设备（厂商不同、协议不同）都能被调度，需要一套<strong>统一的规范</strong>。这就引出两个关键点：</p><ol><li><strong>任务 DSL（Domain-Specific Language，领域专用语言）</strong>：标准化的任务描述语言，用来表达“任务是什么，如何执行”</li><li><strong>设备建模（物模型 Thing Model）</strong>：将设备的能力抽象化，形成一个统一的接口层</li></ol><p>这样，云端就可以只关心“做什么”，而不用关心“设备是怎么做的”</p><hr><h3 id="物模型-thing-model" tabindex="-1"><a class="header-anchor" href="#物模型-thing-model"><span>物模型（Thing Model）</span></a></h3><p>这里借用 DJI 的 TSL（Thing Specification Language）概念 物模型本质上是一个 <strong>设备的数字化表示</strong>，从三个维度描述了设备的能力：</p><ul><li><strong>属性 (Property)</strong>：设备的状态参数，例如无人机的姿态、电池电量、相机模式等。</li><li><strong>服务 (Service)</strong>：可被外部调用的功能，例如“起飞”、“拍照”、“导航到某坐标点”。</li><li><strong>事件 (Event)</strong>：设备运行过程中触发的事件，例如“进入禁飞区”、“电量不足告警”。</li></ul><p>一个典型的物模型 JSON 结构大致如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;profile&quot;: {},    	# 表示该产品是什么</span></span>
<span class="line"><span>    &quot;properties&quot;: [],   # 表示该产品有哪些属性</span></span>
<span class="line"><span>    &quot;services&quot;: [],   	# 表示该产品有哪些可以被外部调用的能力和方法</span></span>
<span class="line"><span>    &quot;events&quot;: []    	# 表示该产品有哪些需要被外部感知和处理的通知信息</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>物模型带来的最大好处是：<strong>统一设备能力的抽象层</strong> 这和 Linux 的“万物皆文件”哲学很像 —— 设备千差万别，但在云端看来，它们都是一类“能力集合”</p><hr><h3 id="hms-健康管理系统" tabindex="-1"><a class="header-anchor" href="#hms-健康管理系统"><span>HMS 健康管理系统</span></a></h3><p>除了设备能力的定义，系统还需要关注<strong>设备健康状态</strong>。例如无人机是否有故障、地面机器人是否掉线、电池是否异常</p><p>健康管理（HMS, Health Management System）的核心价值在于：</p><ul><li><strong>提前预警</strong>：发现设备潜在问题，防止任务中断</li><li><strong>规则化处理</strong>：通过规则引擎定义告警与处理方式（比如低电量自动返航）</li><li><strong>自动化恢复</strong>：某些情况下设备可以自愈，或者系统自动重新分配任务</li></ul><p>这里可以参考 <a href="https://rulego.cc/" target="_blank" rel="noopener noreferrer">RuleGo</a>，一个轻量的规则引擎库，非常适合做设备健康管理和任务规则处理。</p><hr><h3 id="ai-与自然语言任务编排" tabindex="-1"><a class="header-anchor" href="#ai-与自然语言任务编排"><span>AI 与自然语言任务编排</span></a></h3><p>当我们有了任务 DSL 和物模型后，会发现这和 <strong>AI 的 MCP（Model Context Protocol）</strong> 思路非常类似：</p><ul><li>物模型定义设备能力</li><li>任务 DSL 定义调用方式</li></ul><p>这就意味着：任务完全可以用自然语言描述，再由 AI 转换成 DSL 例如：</p><blockquote><p>“让无人机飞到点 A 巡检，同时让地面机器人去点 B”</p></blockquote><p>AI 就能翻译成 DSL JSON 不过为了安全起见，生产系统应该采用 <strong>“AI 生成任务 + 人工审核”</strong> 的模式</p><p><strong>Prompt</strong>示例</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">你是⼀个任务编排引擎的助⼿，负责将⽤户输⼊的⾃然语⾔任务，转换为结构化的任务调度 JSON DSL。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请严格按照以下格式和能⼒描述，⽣成合法的 JSON 结构，供调度系统直接使⽤。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">【任务描述格式】：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`name\`: 任务名称（简洁命名）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`steps\`: 任务步骤数组，每个步骤为⼀个任务动作，具有以下结构：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">每个 step ⽀持以下字段：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`type\`: 任务动作类型，例如 \`drone.goto\`, \`dog.capture\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`target\`: 执⾏此动作的设备 ID，例如 \`drone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`, \`dog</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`params\`: 执⾏动作所需参数（根据设备能⼒）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`retry\`: （可选）失败重试次数，例如 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`onError\`: （可选）失败时的备⽤动作，例如 \`{ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;drone.return&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`condition\`: （可选）仅在满⾜条件时执⾏，例如 \`</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;battery &gt; 30&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- \`type: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;group&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` 表示并发步骤，包含⼀个 \`tasks\` 数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">【已注册设备及能⼒信息如下】：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{devices}}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- 设备 drone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（类型 drone）⽀持：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- takeoff()：起⻜</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- goto(lat, lng, alt)：前往坐标</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- capture()：拍照</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- return()：返回起点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- 设备 dog</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（类型 dog）⽀持：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- goto(x, y)：前往坐标</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- capture()：拍照</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- pose(poseType)：切换姿态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">【⽤户任务描述】：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{{user_prompt}}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请让⽆⼈机⻜到 A 点并拍照，机器狗同时巡视 B 点并拍照。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">【请⽣成合法 JSON】（不要解释，不要注释）：</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、系统架构" tabindex="-1"><a class="header-anchor" href="#二、系统架构"><span>二、系统架构</span></a></h2><p>我采用的是 <strong>“中心任务编排 + 边缘执行”</strong> 的架构</p><ul><li><strong>云端</strong>：负责 DSL 解析、任务调度、规则编排</li><li><strong>设备端（edge-sdk）</strong>：只负责原子指令执行，例如“飞到坐标点”、“转动云台”、“拍照”</li><li><strong>设备能力匹配</strong>：通过物模型自动适配，不同厂商的设备都能即插即用</li></ul><p>核心服务模块：</p><ul><li><strong>任务调度编排引擎</strong></li><li><strong>规则引擎</strong>（健康管理、异常处理）</li><li><strong>HMS 服务</strong>（设备状态监控）</li><li><strong>边缘层服务 edge-sdk</strong></li></ul><h3 id="edge-sdk-的功能" tabindex="-1"><a class="header-anchor" href="#edge-sdk-的功能"><span>edge-sdk 的功能</span></a></h3><p>edge-sdk 是设备侧的统一接入 SDK，封装了一些核心能力：</p><ul><li>注册与心跳机制</li><li>执行本地控制指令（ROS、串口、HTTP 等多种方式）</li><li>状态上报与事件推送</li></ul><hr><h2 id="三、任务-dsl" tabindex="-1"><a class="header-anchor" href="#三、任务-dsl"><span>三、任务 DSL</span></a></h2><p>一个简单任务 DSL 示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;同步巡检任务&quot;,</span></span>
<span class="line"><span>  &quot;steps&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;type&quot;: &quot;group&quot;,</span></span>
<span class="line"><span>      &quot;tasks&quot;: [</span></span>
<span class="line"><span>        { &quot;type&quot;: &quot;drone.goto&quot;, &quot;target&quot;: &quot;drone1&quot;, &quot;params&quot;: { &quot;lat&quot;: 32.1, &quot;lng&quot;: 114.2 } },</span></span>
<span class="line"><span>        { &quot;type&quot;: &quot;dog.goto&quot;, &quot;target&quot;: &quot;dog1&quot;, &quot;params&quot;: { &quot;x&quot;: 10, &quot;y&quot;: 20 } }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，它的思路和 DJI 航线文件很类似，会定义航点、动作、并行/串行执行逻辑等，所以这个功能需要参考航线文件格式来写</p><h3 id="多机器人协同调度示例" tabindex="-1"><a class="header-anchor" href="#多机器人协同调度示例"><span>多机器人协同调度示例</span></a></h3><p>比如一个“区域 A 全面巡检”任务，会被 Mission Service 拆分成：</p><ol><li>通知机巢开机，检查无人机状态</li><li>无人机起飞，前往坐标 A1-A5 拍照上传</li><li>同时，地面机器人巡检 A6-A9</li><li>所有数据汇总到 Telemetry</li><li>任务完成后，无人机返航，机器人回初始点</li></ol><p>这种多机协同，本质上是任务 DSL 与设备物模型的结合。</p>`,49)),e(n,{code:"eJxlkEFOwkAUhvecohcg7lmQmOBKd5ygwabpQoKAewgJ0KZAicTElJRUW1s1CIkGSRv0Mn3T4RZO59UKdhaTmXnf/O/La0nXN1K9JlUUUW6KVwWBrYbYbCs1pSHW20I888nwUxBb6QnUUfy6ymF03YPgCe79hIzCEDQbn8h8xM45nrz70NepzXn69gXOIHvKwaeyxHYGnl3KUrFaOc+35wncUn2OjT7eC5xD72K5nDmWBDIxosBBz0r1gnNZ+Ril3iOxDAZF2wDGC1gaZOnuX5zcn8yfxS9cunpACdrbgWZyOiOK/1p8z8C0EI+1Del0Tw5+HfbgkygJMJnuO93URh9EIdrwahLNk5iG6lFbJ2MPhhuY7n4xLCcOaRz2RzoOb4k1P477M422GtFcdMzJ4aBZW/OD3K1xuCn6A063RD4="}),s[1]||(s[1]=i('<hr><h2 id="四、涉及的关键概念" tabindex="-1"><a class="header-anchor" href="#四、涉及的关键概念"><span>四、涉及的关键概念</span></a></h2><table><thead><tr><th>概念</th><th>作用</th><th>在系统中的体现</th></tr></thead><tbody><tr><td>FSM（有限状态机）</td><td>控制状态流转与异常处理</td><td>任务状态 / 设备状态</td></tr><tr><td>DAG（有向无环图）</td><td>表达任务依赖关系</td><td>DSL 任务步骤结构</td></tr><tr><td>DSL（领域专用语言）</td><td>用户友好的任务定义方式</td><td>JSON 结构任务描述</td></tr><tr><td>Thing Model（物模型）</td><td>描述设备能力</td><td>设备即插即用、自动匹配任务</td></tr><tr><td>事件驱动</td><td>异步触发与解耦</td><td>任务执行、告警上报</td></tr></tbody></table><p>DAG 在这里尤其重要：任务往往不是线性的，而是一个有依赖的图。通过 DAG，我们可以精确描述“哪个步骤依赖于哪个步骤”，避免混乱</p><hr><h2 id="五、一些需要注意的问题" tabindex="-1"><a class="header-anchor" href="#五、一些需要注意的问题"><span>五、一些需要注意的问题</span></a></h2><ol><li><strong>坐标系转换</strong><ul><li>手动建模地图与雷达 SLAM 地图往往不在同一坐标系下</li><li>解决方案： <ul><li>建模时以点云为基准；</li><li>或者在前端人工对齐，调整机器人位置和旋转角度。</li></ul></li></ul></li><li><strong>协议兼容</strong><ul><li>不同厂商的机器人通信方式不同（MQTT、WebSocket、HTTP、ROS Topic），需要在 edge-sdk 层统一封装，或者云端主动进行适配</li></ul></li></ol><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://developer.dji.com/cn/cloud-api/" target="_blank" rel="noopener noreferrer">DJI 上云 API</a></li><li><a href="https://help.aliyun.com/zh/iot/product-overview/what-is-iot-platform" target="_blank" rel="noopener noreferrer">阿里云物联网平台</a></li></ul>',10))])}const k=a(p,[["render",d]]),g=JSON.parse('{"path":"/robot/robot-structure.html","title":"分布式机器人多机协同巡检系统设计","lang":"zh-CN","frontmatter":{},"git":{"createdTime":1758804026000,"updatedTime":1758804026000,"contributors":[{"name":"sharebravery","username":"sharebravery","email":"sharebravery@gmail.com","commits":1,"url":"https://github.com/sharebravery"}]},"readingTime":{"minutes":7.04,"words":2111},"filePathRelative":"robot/robot-structure.md","excerpt":""}');export{k as comp,g as data};
