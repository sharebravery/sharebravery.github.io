import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as c,a as s,d as a,e as p,r as i,o as l}from"./app-Bj4vvvPo.js";const u={},r={href:"https://github.com/sharebravery/openapi-genuu",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7338704641842479167",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const t=i("ExternalLinkIcon");return l(),o("div",null,[n[3]||(n[3]=c(`<h1 id="使用类来组织代码api的结构-结合代码生成" tabindex="-1"><a class="header-anchor" href="#使用类来组织代码api的结构-结合代码生成"><span>使用类来组织代码API的结构：结合代码生成</span></a></h1><p>我们一般对接后台API的接口怎么组织呢，看了不少前端项目各种写法的都有，常见的方法有以下几种：</p><h1 id="不统一管理" tabindex="-1"><a class="header-anchor" href="#不统一管理"><span>不统一管理</span></a></h1><p>最简单的方法是不对API调用进行统一管理，这样在项目的各个地方都会出现API调用的代码</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make a request for a user with a given ID</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user?ID=12345&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle success</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle error</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// always executed</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式虽然简单，但在项目规模扩大后，维护起来会非常困难</p><h1 id="统一管理" tabindex="-1"><a class="header-anchor" href="#统一管理"><span>统一管理</span></a></h1><p>为了更好地组织代码，可以在项目的 <code>src</code> 目录下创建一个 <code>api</code> 目录，所有对接后台API的文件都放在这里，并使用一个对象来管理所有导出的方法</p><p>user.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">user1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    params<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">user2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    params<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token comment">// 可能会统一导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> User  <span class="token operator">=</span><span class="token punctuation">{</span>
  user1<span class="token punctuation">,</span>
  user2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
 <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">user1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%c🚀[error]-17:&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #4240a3&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用类来组织代码" tabindex="-1"><a class="header-anchor" href="#使用类来组织代码"><span>使用类来组织代码</span></a></h1><p>在使用TS时我更习惯于使用类来管理组织代码，这样结构更清晰，也可以使用装饰器做接口权限、参数修改等处理</p><figure><img src="https://cdn.jsdelivr.net/gh/sharebravery/album@master/20240703143852.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">pspService</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 成员分页列表 GET /admin/admins */</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">AdminList</span><span class="token punctuation">(</span>
    <span class="token comment">// 叠加生成的Param类型 (非body参数swagger默认没有生成对象)</span>
    params<span class="token operator">:</span> Models<span class="token punctuation">.</span>AdminListParams<span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>Models<span class="token punctuation">.</span>Response <span class="token operator">&amp;</span> <span class="token punctuation">{</span> data<span class="token operator">?</span><span class="token operator">:</span> Models<span class="token punctuation">.</span>AdminListRet <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/admin/admins</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
      params<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>params<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token punctuation">(</span>options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** 成员创建 POST /admin/admins */</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">AdminCreate</span><span class="token punctuation">(</span>body<span class="token operator">:</span> Models<span class="token punctuation">.</span>AdminCreateArg<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>Models<span class="token punctuation">.</span>Response <span class="token operator">&amp;</span> <span class="token punctuation">{</span> data<span class="token operator">?</span><span class="token operator">:</span> Models<span class="token punctuation">.</span>AdminCreateRet <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/admin/admins</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> body<span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token punctuation">(</span>options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用类来组织代码，结构和后端接口是一一对应的，你也可以在类里面写装饰器</p><figure><img src="https://cdn.jsdelivr.net/gh/sharebravery/album@master/20240703143944.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="生成代码" tabindex="-1"><a class="header-anchor" href="#生成代码"><span>生成代码</span></a></h1><p>细心的你可能发现了，这些对接接口的代码不是我一个个手写的（这种工作重复且无意义），这是我用一个脚本进行生成的，只需要后端提供一份符合OpenAPI3的swagger json就可以一键生成对接接口的代码和模型了！</p><p>可以体验一下，你会喜欢上一键生成API的快感：</p>`,21)),s("p",null,[s("a",r,[n[0]||(n[0]=a("openapi-genuu")),p(t)])]),s("p",null,[n[2]||(n[2]=a("具体的使用方法和注意事项请看这个： ")),s("a",d,[n[1]||(n[1]=a("爽了！一键生成TS模型及接口方法")),p(t)])]),n[4]||(n[4]=s("hr",null,null,-1)),n[5]||(n[5]=s("p",null,[s("em",null,"END")],-1)),n[6]||(n[6]=s("hr",null,null,-1))])}const g=e(u,[["render",k],["__file","codeStruct.html.vue"]]),y=JSON.parse('{"path":"/front-end/codeStruct.html","title":"使用类来组织代码API的结构：结合代码生成","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1719989494000,"updatedTime":1719989910000,"contributors":[{"name":"sharebravery","email":"sharebravery@gmail.com","commits":2}]},"readingTime":{"minutes":2.03,"words":608},"filePathRelative":"front-end/codeStruct.md","localizedDate":"2024年7月3日","excerpt":""}');export{g as comp,y as data};
