import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as e,o as t}from"./app-Bj4vvvPo.js";const i={};function l(c,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="一键搭建-gitlab-和-gitlab-runner并配置gitlab-pages" tabindex="-1"><a class="header-anchor" href="#一键搭建-gitlab-和-gitlab-runner并配置gitlab-pages"><span>一键搭建 GitLab 和 GitLab Runner并配置Gitlab Pages</span></a></h1><p>使用 Docker Compose，可以快速实现 GitLab 的自托管部署，提升代码管理和 CI/CD 流程的自动化。GitLab 是一个功能丰富的 Git 仓库管理平台，提供 Git 存储库托管、代码审查、持续集成和部署（CI/CD）等功能。而 GitLab Runner 是 GitLab 的 CI/CD 组件，负责执行 CI/CD 作业。</p><h2 id="一、准备工作" tabindex="-1"><a class="header-anchor" href="#一、准备工作"><span>一、准备工作</span></a></h2><ol><li><p><strong>Docker 和 Docker Compose 安装</strong>：如果你的系统尚未安装 Docker 和 Docker Compose需要先进行安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker.io <span class="token function">docker-compose</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token parameter variable">--now</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置docker国内源（如果你可以直接拉国外镜像不需此操作）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker

<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;

{

    &quot;registry-mirrors&quot;: [

    	&quot;https://docker-0.unsee.tech&quot;,

        &quot;https://docker-cf.registry.cyou&quot;,

        &quot;https://docker.1panel.live&quot;

    ]

}
EOF</span>

<span class="token comment"># 重启docker服务</span>
<span class="token function">sudo</span> systemctl daemon-reload <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建数据存储目录</p><p>在宿主机上为 GitLab 和 GitLab Runner 创建必要的存储目录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir -p /srv/gitlab/data /srv/gitlab/logs /srv/gitlab/config /mnt/host/gitlab-pages /etc/gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="二、创建-docker-compose-文件" tabindex="-1"><a class="header-anchor" href="#二、创建-docker-compose-文件"><span>二、创建 Docker Compose 文件</span></a></h2><p>以下是一个使用 Docker Compose 一键搭建 GitLab 和 GitLab Runner 的配置模板和docker compose的使用命令：</p><ul><li>创建文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span>  /srv/gitlab/docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> gitlab/gitlab<span class="token punctuation">-</span>ee<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitlab
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 192.168.0.122
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        external_url &#39;http://192.168.0.122&#39;
        gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 2222</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8888:80&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;443:443&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;2222:22&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /srv/gitlab/data<span class="token punctuation">:</span>/var/opt/gitlab
      <span class="token punctuation">-</span> /srv/gitlab/logs<span class="token punctuation">:</span>/var/log/gitlab
      <span class="token punctuation">-</span> /srv/gitlab/config<span class="token punctuation">:</span>/etc/gitlab
      <span class="token punctuation">-</span> /mnt/host/gitlab<span class="token punctuation">-</span>pages<span class="token punctuation">:</span>/var/www/gitlab/pages
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;curl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 1m
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s

  <span class="token key atrule">gitlab-runner</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> gitlab/gitlab<span class="token punctuation">-</span>runner<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitlab<span class="token punctuation">-</span>runner
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> gitlab
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /etc/gitlab<span class="token punctuation">-</span>runner
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
      <span class="token punctuation">-</span> /mnt/host/gitlab<span class="token punctuation">-</span>pages<span class="token punctuation">:</span>/mnt/host/gitlab<span class="token punctuation">-</span>pages
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> CI_SERVER_URL=http<span class="token punctuation">:</span>//192.168.0.122<span class="token punctuation">:</span>8888/  <span class="token comment"># 同样修改为新的端口</span>
      <span class="token punctuation">-</span> REGISTRATION_TOKEN=S6CqjbRUF9Rfj6XyUE<span class="token punctuation">-</span>P
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动（在docker-compose.yml目录下）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>停止（在docker-compose.yml目录下）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="三、gitlab-和-gitlab-runner-管理与配置" tabindex="-1"><a class="header-anchor" href="#三、gitlab-和-gitlab-runner-管理与配置"><span>三、GitLab 和 GitLab Runner 管理与配置</span></a></h1><p>以下是一些常用的操作和故障排除步骤。</p><h2 id="_1-获取-gitlab-root-密码" tabindex="-1"><a class="header-anchor" href="#_1-获取-gitlab-root-密码"><span>1. 获取 GitLab Root 密码</span></a></h2><p>安装完成打开gitlab地址，这时候是登录不上的 需要先获取root账号密码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker exec -it gitlab-primary cat /etc/gitlab/initial_root_password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将输出 GitLab Root 用户的初始密码，这个密码文件只保留24小时，需要及时修改密码。</p><h2 id="_2-检查-gitlab-容器健康状态" tabindex="-1"><a class="header-anchor" href="#_2-检查-gitlab-容器健康状态"><span>2. 检查 GitLab 容器健康状态</span></a></h2><p>检查 GitLab 容器的健康状态，可以使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker inspect --format &#39;{{.State.Health.Status}}&#39; gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果状态不正常，可以尝试重启 GitLab 容器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker restart gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-停止并删除-gitlab-runner-容器" tabindex="-1"><a class="header-anchor" href="#_3-停止并删除-gitlab-runner-容器"><span>3. 停止并删除 GitLab Runner 容器</span></a></h2><p>若需要停止并删除 <code>gitlab-runner</code> 容器，可以执行以下步骤：</p><ul><li>停止容器</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker stop gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除容器</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker rm gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>检查容器状态</li></ul><p>确认 <code>gitlab-runner</code> 容器已经停止并删除：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker ps -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，你应该只看到正在运行的 <code>gitlab</code> 容器。</p><h2 id="_4-配置和注册-gitlab-runner" tabindex="-1"><a class="header-anchor" href="#_4-配置和注册-gitlab-runner"><span>4. 配置和注册 GitLab Runner</span></a></h2><p>进入 <code>gitlab-runner</code> 容器并注册 Runner：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker exec -it gitlab-runner bash
gitlab-runner register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-配置-gitlab-pages" tabindex="-1"><a class="header-anchor" href="#_5-配置-gitlab-pages"><span>5. 配置 GitLab Pages</span></a></h2><p>为了启用 GitLab Pages，你可以修改 GitLab 的配置文件。以下是启用 Pages 的步骤：</p><ol><li><p>进入 GitLab 容器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker exec -it gitlab /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改配置文件 <code>/etc/gitlab/gitlab.rb</code>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>vi /etc/gitlab/gitlab.rb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置以下参数：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 2222
pages_external_url &quot;http://wiki-gitlab.cn&quot;
gitlab_pages[&#39;enable&#39;] = true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新配置和重启 GitLab：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>gitlab-ctl reconfigure
gitlab-ctl restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_6-网络配置和端口问题" tabindex="-1"><a class="header-anchor" href="#_6-网络配置和端口问题"><span>6. 网络配置和端口问题</span></a></h2><ul><li><p><strong>重启网络服务</strong>：</p><p>如果修改了网络设置，可以重启网络服务：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo systemctl restart systemd-networkd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>修改端口</strong>：</p><p>如果你需要修改 GitLab 的 SSH 端口，可以在 <code>/etc/gitlab/gitlab.rb</code> 文件中进行修改（建议直接在docker-compose.yml修改即可）：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 2222
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改后，执行 <code>gitlab-ctl reconfigure</code> 重载配置。</p></li></ul><h2 id="_7-查看-gitlab-日志" tabindex="-1"><a class="header-anchor" href="#_7-查看-gitlab-日志"><span>7. 查看 GitLab 日志</span></a></h2><p>如果 GitLab 容器出现问题，可以通过以下命令查看日志：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo docker logs gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>END</p><hr>`,48)]))}const o=n(i,[["render",l],["__file","一键搭建 GitLab 和 GitLab Runner并配置Gitlab Pages.html.vue"]]),p=JSON.parse('{"path":"/server/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%20GitLab%20%E5%92%8C%20GitLab%20Runner%E5%B9%B6%E9%85%8D%E7%BD%AEGitlab%20Pages.html","title":"一键搭建 GitLab 和 GitLab Runner并配置Gitlab Pages","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、准备工作","slug":"一、准备工作","link":"#一、准备工作","children":[]},{"level":2,"title":"二、创建 Docker Compose 文件","slug":"二、创建-docker-compose-文件","link":"#二、创建-docker-compose-文件","children":[]},{"level":2,"title":"1. 获取 GitLab Root 密码","slug":"_1-获取-gitlab-root-密码","link":"#_1-获取-gitlab-root-密码","children":[]},{"level":2,"title":"2. 检查 GitLab 容器健康状态","slug":"_2-检查-gitlab-容器健康状态","link":"#_2-检查-gitlab-容器健康状态","children":[]},{"level":2,"title":"3. 停止并删除 GitLab Runner 容器","slug":"_3-停止并删除-gitlab-runner-容器","link":"#_3-停止并删除-gitlab-runner-容器","children":[]},{"level":2,"title":"4. 配置和注册 GitLab Runner","slug":"_4-配置和注册-gitlab-runner","link":"#_4-配置和注册-gitlab-runner","children":[]},{"level":2,"title":"5. 配置 GitLab Pages","slug":"_5-配置-gitlab-pages","link":"#_5-配置-gitlab-pages","children":[]},{"level":2,"title":"6. 网络配置和端口问题","slug":"_6-网络配置和端口问题","link":"#_6-网络配置和端口问题","children":[]},{"level":2,"title":"7. 查看 GitLab 日志","slug":"_7-查看-gitlab-日志","link":"#_7-查看-gitlab-日志","children":[]}],"git":{"createdTime":1739772411000,"updatedTime":1739772411000,"contributors":[{"name":"sharebravery","email":"sharebravery@gmail.com","commits":1}]},"readingTime":{"minutes":2.96,"words":888},"filePathRelative":"server/一键搭建 GitLab 和 GitLab Runner并配置Gitlab Pages.md","localizedDate":"2025年2月17日","excerpt":""}');export{o as comp,p as data};
